{"version":3,"sources":["components/AddCategory/index.js","components/helpers/getGifs.js","components/GifReadItem/index.js","components/GifRead/index.js","hooks/useFetchGifs.js","components/GifExpertApp/index.js","index.js"],"names":["AddCategory","props","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","console","log","handleSubmit","type","value","placeholder","onChange","target","getGift","category","a","url","encodeURI","fetch","r","json","data","map","img","id","title","images","downsized_medium","gifs","GifReadItem","className","src","alt","GifRead","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"qPA2CeA,EAvCK,SAACC,GAAW,IAEpBC,EAAgBD,EAAhBC,YAFmB,EAIWC,mBAAS,IAJpB,mBAInBC,EAJmB,KAIPC,EAJO,KAqB3B,OACI,sBAAMC,SAAU,SAACC,GAAD,OAZC,SAACA,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,GAC1BR,GAAY,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACtCN,EAAc,KAEdO,QAAQC,IAAI,6CAKQC,CAAaP,IAArC,SACI,uBACIQ,KAAK,OACLC,MAAOZ,EACPa,YAAY,mBACZC,SArBW,SAACX,GACpBF,EAAcE,EAAEY,OAAOH,a,+BCTlBI,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAEHI,MAAOF,GAFJ,cAEbG,EAFa,gBAGIA,EAAEC,OAHN,uBAGXC,EAHW,EAGXA,KAHW,UAKAA,EAAKC,KAAK,SAAAC,GAAQ,IAAD,EAChC,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QATvB,eAKbY,EALa,yBAYZA,GAZY,4CAAH,sDCoBLC,G,MAlBK,SAAAnC,GAAU,IAElB6B,EAAQ7B,EAAR6B,IAER,OACI,qBAAKO,UAAU,oCAAf,SACI,sBAAKA,UAAU,OAAf,UACI,qBAAKC,IAAKR,EAAIP,IAAKgB,IAAKT,EAAIE,QAC5B,4BAAKF,EAAIE,eCwBVQ,EA9BC,SAAAvC,GAAU,IAEdoB,EAAapB,EAAboB,SAFa,ECHG,SAAEA,GAAc,MACdlB,mBAAS,CAC/ByB,KAAM,GACNa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAC,GACnBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGlB,CAACpB,IAEGqB,EDR2BK,CAAa1B,GAAjCY,EAJO,EAIbL,KAAca,EAJD,EAICA,QAEtB,OACI,qCACI,oBAAIJ,UAAU,0CAAd,SAA0DhB,IAExDoB,GAAW,mBAAGJ,UAAU,yCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAEQJ,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,CAEAA,IAAMA,GADAA,EAAIC,aEUnBiB,EA5BM,WAAO,IAAD,EAEW7C,mBAAS,CAAC,cAFrB,mBAEfkB,EAFe,KAELnB,EAFK,KASvB,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,YAAcA,IAC3B,uBACJ,6BAEQmB,EAASQ,KAAI,SAAAR,GAAQ,OACjB,aADuB,CACtB,EAAD,CAEAA,SAAWA,GADLA,YChB1B4B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7404fc3f.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst AddCategory = (props) => {\r\n    \r\n    const { setCategory } = props\r\n\r\n    const [ inputValue, setInputValue ] = useState('');\r\n\r\n    const onHandleChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n      \r\n        if(inputValue.trim().length > 2){\r\n            setCategory((cats) => [inputValue, ...cats]);\r\n            setInputValue('')\r\n        } else {\r\n            console.log('Debes de ingresar un mensaje m√°s largo')\r\n        }      \r\n    };\r\n    \r\n    return (\r\n        <form onSubmit={(e) =>  handleSubmit(e) }>\r\n            <input \r\n                type='text'\r\n                value={inputValue}\r\n                placeholder='Ingresa un valor'\r\n                onChange={onHandleChange}\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategory: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nexport default AddCategory;\r\n","\r\n\r\nexport const getGift = async ( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=20&api_key=n2MTy7GMEz0cmwClmxg5msNG1C1Bz4Tm`;\r\n    const r = await fetch( url );\r\n    const { data } = await r.json();\r\n\r\n    const gifs = await data.map( img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        };\r\n    });\r\n    return(gifs);\r\n\r\n};","import React from 'react'\r\nimport './index.css'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst GifReadItem = props => {\r\n\r\n    const { img } = props;\r\n\r\n    return (\r\n        <div className=\"animate__animated animate__rollIn\">\r\n            <div className=\"card\">\r\n                <img src={img.url} alt={img.title} />\r\n                <p>{ img.title }</p>\r\n            </div>\r\n        </div>  \r\n    );\r\n};\r\n\r\nGifReadItem.propTypes = {\r\n    img: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default GifReadItem\r\n","import React from 'react';\r\nimport './index.css';\r\nimport PropTypes from 'prop-types';\r\nimport { useFetchGifs } from '../../hooks/useFetchGifs';\r\nimport GifReadItem from '../GifReadItem';\r\n\r\nconst GifRead = props => {\r\n    \r\n    const { category } = props;\r\n\r\n    const { data: images, loading } = useFetchGifs(category);\r\n    \r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__bounceInLeft\">{ category }</h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__backInRight\">Loading...</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => (\r\n                        <GifReadItem \r\n                        key={ img.id }\r\n                        img={ img }\r\n                        /> \r\n                    ))\r\n                }\r\n            </div> \r\n        </> \r\n    )\r\n}\r\n\r\nGifRead.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n}\r\n\r\nexport default GifRead\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGift } from \"../components/helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => { //Este Custom hook lo que hace es ejecutar la peticion al servidor y poder mostrarlo en un estado\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGift(category).then(imgs => { \r\n            setState({\r\n                data: imgs,\r\n                loading: false,\r\n            })    \r\n        })\r\n    }, [category]);\r\n\r\n    return state // { data: [], loading: true, }\r\n\r\n\r\n}","import React,{useState} from 'react'\r\nimport AddCategory from '../AddCategory';\r\nimport GifRead from '../GifRead';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [ category, setCategory ] = useState(['One Punch']);\r\n\r\n    // const HandleAdd = () => {\r\n    //     // setCategories( [...categories, 'Hola mundo']);\r\n    //     setCategories( cats => [...cats, 'HunterXHunter']);\r\n    // };\r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategory={ setCategory } />\r\n            <hr />\r\n        <ol>\r\n            {\r\n                category.map(category => ( //Aca lo que hacemos es mandar un array de los elementos que eesten dentro de category \r\n                    <GifRead \r\n                    key={ category }\r\n                    category={ category } /> \r\n                ))\r\n            }\r\n            \r\n        </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './components/GifExpertApp'\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}